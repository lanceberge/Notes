:PROPERTIES:
:ID:       7069E2EA-6633-4DD0-ADE3-F8F4203AFBD2
:END:
#+title: elisp
#+category: elisp

[[id:B71472DF-3214-44C6-89AF-C9C1FCFF0296][Emacs]]
https://alphapapa.github.io/emacs-package-dev-handbook/

=car= - the first element in a list
=cdr= - the rest of the list

* Equality

  - =eq= Check pointer
  - =equal= Check Value

* Cons

  #+BEGIN_SRC emacs-lisp
(setcar cons-name 2)

;; Append lists
(append '(1 2 3) 4)
  #+END_SRC

* Alists

  Alists are a list of cons cells - i.e. a HashMap

  #+BEGIN_SRC emacs-lisp :results none
(setq some-alist '((one . 1)
		   (two . 2)
		   (three . 3)))

(alist-get 'one some-alist) ;; 1

(map-put some-alist 'four 4)
  #+END_SRC

* Lists

  #+BEGIN_SRC emacs-lisp :results none
;; Set idx 5 of the list
(setf (alist) 5)

(alist-get 'one some-alist)
  #+END_SRC

* Plists

  Key/Value pairs with a flat list

  #+BEGIN_SRC emacs-lisp :results none
(plist-get '(one 1 two 2) 'one)
  #+END_SRC

** Plist vs. Alist

* Debugger

  M-x =debug on entry=
  M-x =toggle-debug-on-error=

  place =(debug)= in your code to go into =debug= mode - good for viewing locals

  - v - expand local vars from that stack frame
  - n, p - navigate stack frames
  - + - pretty print


  Edebug

  SPC - step through
  =edebug-goto-here= Continue to here
  Kill the \*backtrace\* buffer - it can stop the debugger from running

  - i - step in
  - n - step
  - H - goto here
  - c - continue
  - d - view locals
  - e - eval

** Backtrace Buffer

   - d - step through

* Logic

  - =cl-loop= is the most efficient
  - unless - runs if the var is nil
  - =(progn)= - run a sequence of functions and return the last

* Lispy

  - Barf - < - send the paren forward
  - w - move up (swap with paren above it)
  - d - goto pair
  - s - move down
  - c - clone
  - e - eval
  - xf - lambda to defun
  - xl - defun to lambda
  - q - avy-paren
  - Q - avy-char
  - a - avy-symbol
  - H - ace-symbol-replace
